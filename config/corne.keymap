/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Mod-Tap, Left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <36 37 38 39 40 41 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Mod-Tap, Right";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_at {
            bindings = <&kp AT>;
            key-positions = <13 22>;
            timeout-ms = <50>;
            layers = <0>;
        };

        combo_colon {
            bindings = <&mt COLON SEMI>;
            key-positions = <33 32>;
            timeout-ms = <50>;
            layers = <0>;
        };

        combo_bang {
            bindings = <&kp EXCLAMATION>;
            key-positions = <34 33>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <34 35>;
        };

        combo_dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <15 21>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC       &kp Q            &kp W            &kp F                &kp P              &kp B            &kp J      &kp L               &kp U                 &kp Y             &none              &none
&kp TAB       &hml LEFT_GUI A  &hml LEFT_ALT R  &hml LEFT_CONTROL S  &hml LEFT_SHIFT T  &kp G            &kp M      &hmr RIGHT_SHIFT N  &hmr RIGHT_CONTROL E  &hmr RIGHT_ALT I  &hmr RIGHT_META O  &kp SQT
&kp CAPSLOCK  &kp Z            &kp X            &kp D                &kp C              &kp V            &kp K      &kp H               &kp COMMA             &kp DOT           &kp FSLH           &kp NON_US_BACKSLASH
                                                &to 3                &kp DELETE         &kp BACKSPACE    &kp SPACE  &kp RET             &to 1
            >;
        };

        rt_num {
            bindings = <
&none  &none         &none         &none             &none           &none     &kp KP_NUMLOCK  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0     &none
&none  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none     &none           &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp KP_SUBTRACT  &kp KP_PLUS
&none  &none         &none         &none             &none           &none     &kp N0          &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp KP_DIVIDE    &kp KP_EQUAL
                                   &to 0             &trans          &trans    &trans          &trans        &to 2
            >;
        };

        rt2_sym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &none      &none  &none      &none     &none     &none      &none     &none     &none         &none      &none
&none  &kp TILDE  &none  &kp MINUS  &kp LBKT  &none     &none      &kp RBKT  &kp PLUS  &kp ASTERISK  &kp EQUAL  &none
&none  &none      &none  &none      &none     &none     &kp UNDER  &none     &none     &none         &none      &none
                         &to 1      &trans    &trans    &trans     &trans    &to 0
            >;
        };

        lt_game {
            bindings = <
&none   &none   &kp Q   &kp W   &kp E   &kp R        &none   &none           &none           &none   &none      &none
&trans  &trans  &kp A   &kp S   &kp D   &kp F        &none   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP  &kp RIGHT  &none
&trans  &trans  &trans  &trans  &trans  &trans       &none   &none           &none           &none   &none      &none
                        &to 4   &none   &kp SPACE    &trans  &trans          &to 0
            >;
        };

        lt2_blue {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none       &none   &trans  &trans  &trans  &trans    &none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&none       &none   &trans  &trans  &trans  &trans    &none   &none         &none         &none         &none         &none
&bt BT_CLR  &trans  &trans  &trans  &trans  &trans    &none   &none         &none         &none         &none         &none
                            &to 0   &trans  &trans    &trans  &trans        &to 3
            >;
        };
    };
};
